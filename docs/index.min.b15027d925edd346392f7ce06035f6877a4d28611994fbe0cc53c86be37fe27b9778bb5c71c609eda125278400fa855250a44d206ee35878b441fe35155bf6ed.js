var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(n){const s=suggestions.classList.contains("d-none");if(s)return;const e=[...suggestions.querySelectorAll("a")];if(e.length===0)return;const t=e.indexOf(document.activeElement);if(n.key==="ArrowUp"){n.preventDefault();const s=t>0?t-1:0;e[s].focus()}else if(n.key==="ArrowDown"){n.preventDefault();const s=t+1<e.length?t+1:t;e[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/hugo/install/",title:"Instalar",description:"Como instalar Hugo y la plantilla Doks",content:"Requerimientos #\rGit #\rPrimeramente tendremos que instalar git para descargar el tema. Git para windows\n\rRepaso sobre git\rSi quieres recordar como funciona git y sus comandos visita el quickstart de git A partir de esto, instalamos el tema en una carpeta con el siguiente comando:\n\rgit clone https://github.com/h-enk/doks-child-theme.git my-doks-site \u0026amp;\u0026amp; cd my-doks-site\r Nodejs y npm #\rNodejs permite ejecutar código javascript de manera local. A su vez, npm es un administrador de instalaciones de nodejs, con capacidad para manejar e instalar módulos. Se instala en el siguiente enlace\nEsto incluría los comandos node y npm en nuestra consola.\nA continuación ejecutamos el comando npm install. El cual instalará todos los modules necesarios para el desarrollo.\nPrueba de funcionamiento #\rPara probar el funcionamiento de Doks podemos hacer un host de la página. Esto usará los archivos markdown y la configuración de prueba que viene en el repositorio que hemos descargado y lo alojará en una página web.\nEl comando a ejecutar es: npm run start. Al terminar de ejecutarse alojará una página web en esta dirección\n"}),e.add({id:1,href:"/docs/hugo/create_content/",title:"Crear contenido",description:"Como crear contenido",content:"Estructura de carpetas #\rDentro de la carpeta docs existen diferentes carpetas donde están organizados todos los proyectos/categorías. También algunas carpetas que vienen de prueba cuando instalas el Doks, las cuales muestran algunas de las funcionalidades del módulo.\nSi acabas de descargarte e instalado hugo y doks es recomendable echarle un vistazo a la carpeta prologue dentro de docs para ver un poco la organización que sigue.\nNuevo proyecto/categoría #\rPara crear un nuevo proyecto/categoría primero tendremos que crear una carpeta dentro de docs. Esta puede tener cualquier nombre pero se recomienda que indique el proyecto que es. A continuación se necesita generar un archivo con el nombre _index.md. Es importante que siga este nombre ya que si no Doks no lo va a reconocer. Este archivo cumple la función de especificar datos sobre el proyecto.\nEl contenido del archivo debe de ser como lo siguiente\n\r---\rtitle : \u0026quot;Hugo - Documentación\u0026quot;\rdescription: \u0026quot;Prologue Doks.\u0026quot;\rlead: \u0026quot;\u0026quot;\rdate: 2020-10-06T08:48:45+00:00\rlastmod: 2020-10-06T08:48:45+00:00\rdraft: false\rweight: 0\r---\r Esto es lo que llamamos cabecera. Sus parámetros son los siguientes\n title: nombre que queramos que aparezca en el indice de proyectos. description: breve descripción del proyecto lead: lo que aparecerá en el primer párrafo. En este caso no sirve de nada ya que esta página no se verá. Si nos será útil cuando estemos escribiendo el contenido de la página date y lastmod: fecha de creación y modificación respectivamente draft: indica si es un borrador.   weight: La posición que ocupará en el indice. 100 es la primera, 110 la segunda, 120 la segunda\u0026hellip;  El weight en el sidebar por defecto se hace de forma inversa para los menús. Para cambiar esto, vamos al archivo layouts/partials/sidebar/auto-collapsible-menu.html y cambiamos la linea:\n{{ range .Sections.ByWeight.Reverse }}\r por:\n{{ range .Sections.ByWeight }}\r Contenido en el proyecto #\rComo se ha mencionado anteriomente, esta página del menu no es accesible. Podemos añadir contenido debajo de la cabecera pero a menos que cambiemos la url no podremos acceder manualmente a esta. Tampoco es que sea necesario ya que la barra de la izquierda nos permitirá navegar entre los proyectos, lo que quita la necesidad de entrar a la página de un proyecto.\nCrear contenido #\rCrear contenido es muy similar a crear un proyecto. De hecho, es necesario poner la cabecera que hemos mencionado anteriormente y especificar el orden con weight, especificar un nombre, el lead, etc\nDebajo de esto empezaremos a redactar el contenido.\nPara insertar texto simple, tendremos que simplemente escribirlo debajo de la cabecera. A continuación se explicará más en detalles características especiales de markdown y hugo.\nCabe destacar que el plugin Doks utiliza una especie de \u0026ldquo;compilador de markdown\u0026rdquo; llamado goldmark. Este permite instalar plugin que extienden la funcionalidad del markdown básico\nTipo de titulos #\rPodremos especificar el tamaño de los titulos usando el caracter #. Todos los titulos que añadamos se pondrán en el índice de la derecha de la página automáticamente\nDependiendo de cuantas # pongamos el titulo será más grande o menos. Por ejemplo:\n# Titulo\r## Subtitulo\r### SubSubTitulo\r#### a\r##### b\r###### c\r Esto generá lo siguiente:\nImágenes #\r⚠️ \rCrear \r\r--\rSi queremos incluir imágenes primero tendremos que crear una carpeta nueva dentro del proyecto para la página de contenido que estemos redactando actualmente. Se recomienda llamarla igual que el archivo markdown que estabamos redactando. A continuación moveremos el archivo md con el contenido que estabamos redactando a esta carpeta, cambiandole el nombre a index.md. Aunque le estemos cambiando el nombre y la carpeta padre, la cabecera funcionará exactamente igual, por lo que no tendremos que cambiar la configuración.\n..\r├── blog/\r│ ├── say-hello-to-doks/\r│ │ ├── index.md\r│ │ └── say-hello-to-doks.png\r│ └── _index.md\r└── _index.md\r A continuación, meteremos todas las imágenes que queramos usar dentro de esta carpeta. Para mostrarlas en la página usaremos lo siguiente\n![cap](Captura.png)\r donde:\n cap es el nombre que queremos ponerle a la imágen en la página. Puede ser cualquiera y no tiene que ser igual al nombre del archivo Captura.png es la imágen que queremos poner.  a task list item\rlist syntax required\rincomplete\rcompleted\r\r- [ ] Mercury - [ ] Venus\r- [ ] Earth (Orbit/Moon)\r- [ ] Mars\r- [ ] Jupiter\r- [ ] Saturn\r- [ ] Uranus\r- [ ] Neptune\r- [ ] Comet Haley\r--\r"}),e.add({id:2,href:"/docs/big-data/introduction/",title:"Introduction",description:"Doks is a Hugo theme for building secure, fast, and SEO-ready documentation websites, which you can easily update and customize.",content:"Get started #\rThere are two main ways to get started with Doks:\nTutorial #\r👉 \rThe Tutorial is intended for novice to intermediate users. \r\rStep-by-step instructions on how to start a new Doks project. Tutorial →\nQuick Start #\r👉 \rThe Quick Start is intended for intermediate to advanced users. \r\rOne page summary of how to start a new Doks project. Quick Start →\nGo further #\rRecipes, Reference Guides, Extensions, and Showcase.\nRecipes #\rGet instructions on how to accomplish common tasks with Doks. Recipes →\nReference Guides #\rLearn how to customize Doks to fully make it your own. Reference Guides →\nExtensions #\rGet instructions on how to add even more to Doks. Extensions →\nShowcase #\rSee what others have build with Doks. Showcase →\nContributing #\rFind out how to contribute to Doks. Contributing →\nHelp #\rGet help on Doks. Help →\n"}),e.add({id:3,href:"/docs/hugo/",title:"Hugo - Documentación",description:"Prologue Doks.",content:""}),e.add({id:4,href:"/docs/big-data/quick-start/",title:"Quick Start",description:"One page summary of how to start a new Doks project.",content:"Requirements #\r Git — latest source release Node.js — latest LTS version or newer  \rWhy Node.js?\rDoks uses npm (included with Node.js) to centralize dependency management, making it easy to update resources, build tooling, plugins, and build scripts. Start a new Doks project #\rCreate a new site, change directories, install dependencies, and start development server.\nCreate a new site #\rDoks is available as a child theme and a starter theme.\nChild theme #\r Intended for novice to intermediate users Intended for minor customizations Easily update npm packages — including Doks  git clone https://github.com/h-enk/doks-child-theme.git my-doks-site\r Starter theme #\r Intended for intermediate to advanced users Intended for major customizations Easily update npm packages  git clone https://github.com/h-enk/doks.git my-doks-site\r \rHelp me choose\rNot sure which one is for you? Pick the child theme. Change directories #\rcd my-doks-site\r Install dependencies #\rnpm install\r Start development server #\rnpm run start\r Doks will start the Hugo development webserver accessible by default at http://localhost:1313. Saved changes will live reload in the browser.\nOther commands #\rDoks comes with commands for common tasks. Commands →\n"}),e.add({id:5,href:"/docs/odoo/",title:"Odoo",description:"Prologue Doks.",content:""}),e.add({id:6,href:"/docs/big-data/",title:"Big Data",description:"Prologue Doks.",content:""}),e.add({id:7,href:"/docs/big-data/commands/",title:"Commands",description:"Doks comes with commands for common tasks.",content:"💡 \rYou can change the commands in the scripts section of `./package.json`. \r\rcreate #\rCreate new content for your site:\nnpm run create [path] [flags]\r See also the Hugo docs: hugo new.\nDocs based tree #\rCreate a docs based tree — with a single command:\nnpm run create -- --kind docs [section]\r For example, create a docs based tree named guides:\nnpm run create -- --kind docs guides\r lint #\rCheck scripts, styles, and markdown for errors:\nnpm run lint\r scripts #\rCheck scripts for errors:\nnpm run lint:scripts [-- --fix]\r styles #\rCheck styles for errors:\nnpm run lint:styles [-- --fix]\r markdown #\rCheck markdown for errors:\nnpm run lint:markdown [-- --fix]\r clean #\rDelete temporary directories:\nnpm run clean\r start #\rStart local development server:\nnpm run start\r build #\rBuild production website:\nnpm run build\r functions #\rBuild Lambda functions:\nnpm run build:functions\r preview #\rBuild production website including draft and future content:\nnpm run build:preview\r "}),e.add({id:8,href:"/docs/help/how-to-update/",title:"How to Update",description:"Regularly update the installed npm packages to keep your Doks website stable, usable, and secure.",content:"💡 \rLearn more about semantic versioning and advanced range syntax. \r\rCheck for outdated packages #\rThe npm outdated command will check the registry to see if any (or, specific) installed packages are currently outdated:\nnpm outdated [[\u0026lt;@scope\u0026gt;/]\u0026lt;pkg\u0026gt; ...]\r Update packages #\rThe npm update command will update all the packages listed to the latest version (specified by the tag config), respecting semver:\nnpm update [\u0026lt;pkg\u0026gt;...]\r "}),e.add({id:9,href:"/docs/help/troubleshooting/",title:"Troubleshooting",description:"Solutions to common problems.",content:"Problems updating npm packages #\rDelete the ./node_modules folder, and run again:\nnpm install\r Problems with cache #\rDelete the temporary directories:\nnpm run clean\r "}),e.add({id:10,href:"/docs/help/faq/",title:"FAQ",description:"Answers to frequently asked questions.",content:"Hyas? #\rDoks is a Hyas theme build by the creator of Hyas.\nFooter notice? #\rPlease keep it in place.\nKeyboard shortcuts for search? #\r focus: Ctrl + / select: ↓ and ↑ open: Enter close: Esc  Other documentation? #\r Netlify Hugo  Can I get support? #\rCreate a topic:\n Netlify Community Hugo Forums Doks Discussions  Contact the creator? #\rSend h-enk a message:\n Netlify Community Hugo Forums Doks Discussions  "}),e.add({id:11,href:"/docs/help/",title:"Help",description:"Help Doks.",content:""}),e.add({id:12,href:"/docs/odoo/odoo_api/",title:"Api de Odoo",description:"Introducción #\r¿Para que sirve la API de Odoo?\nPodemos acceder a los datos de Odoo desde cualquiera de los módulos internos, pero a veces interesa poder acceder a esta información desde fuera. Es aquí donde entra la API de Odoo. La API nos da acceso a todos los modelos de Odoo, así como sus vistas y sus campos. Para poder obtener toda esta información usaremos XML-RPC, un protocolo de llamada a procedimiento remoto que utiliza HTTP para sus operaciones de transmisión de mensajes, los cuales están codificados con XML.",content:"Introducción #\r¿Para que sirve la API de Odoo?\nPodemos acceder a los datos de Odoo desde cualquiera de los módulos internos, pero a veces interesa poder acceder a esta información desde fuera. Es aquí donde entra la API de Odoo. La API nos da acceso a todos los modelos de Odoo, así como sus vistas y sus campos. Para poder obtener toda esta información usaremos XML-RPC, un protocolo de llamada a procedimiento remoto que utiliza HTTP para sus operaciones de transmisión de mensajes, los cuales están codificados con XML.\nFuncionamiento #\rConfiguración #\rAntes de todo tendremos que configurar el acceso a la API. Esto se hace de la siguiente manera:\n\rurl = 'http://192.168.1.xx:8069/'\rdb = 'nombre_base'\rusername = ''\rpassword = 'contraseña'\r  url: la url de nuestro servidor de Odoo. En nuestro caso, sería la url de la máquina virtual más el puerto 8069 db: el nombre de la base de datos username: el usuario con el que accederemos a los datos, nos interesa que sea el administrador para que pueda acceder a la mayor cantidad de datos password: la contraseña de dicho usuario. A partir de Odoo 14 se puede generar una clave de la api para evitar escribir la contraseña. Esta clave se pondría en este mismo campo, sustituyendo a la contraseña.  Generar una clave para la api #\rSi estas en Odoo 14 o superior podemos generar una clave como se mencionó anteriormente. Para eso hacemos clic en la esquina superior derecha de la interfaz de Odoo (donde se encuentra nuestro nombre de usuario y la foto). A continuación, accedemos a Mi perfil, donde seleccionaremos Seguridad de la cuenta y por último haremos clic en Nueva clave de API.\nConsulta de datos que no requieren de autentificación #\rEs posible acceder a algunos datos sin autenticarse con la api. Por ejemplo, podemos consultar que versión de Odoo se esta utilizando. En primer lugar, usaremos el protocolo XML-RPC usando la siguiente línea:\nimport xmlrpc.client\r De esta forma estaremos importando todo lo necesario para consultar datos con la api.\nA partir de esto, mostraremos la información de versión de la siguiente forma:\ncommon =\rxmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url))\rprint(common.version())\r Con el método xmlrpc.client.ServerProxy accederemos a la base de datos usando la url que hayamos especificado. El “common” dentro de este método determina que solo queremos acceder a datos que no necesitan de autentificación.\nComo autentificarse #\rLa mayoría de los datos de la base de datos requieren de autentificación. Para autentificarse usaremos el siguiente código:\n\rcommon =\rxmlrpc.client.ServerProxy('{}/xmlrpc/2/common'.format(url))\ruid = common.authenticate(db, username, password, {})\rmodels =\rxmlrpc.client.ServerProxy('{}/xmlrpc/2/object'.format(url))\r Como se puede ver, se están utilizando los datos que especificamos antes (nombre de la base de datos, usuario, contraseña y url).\nUna vez hayamos puesto estás líneas y no haya fallos en la información proporcionada podremos consultar información de la base de datos.\nConsultar información (método search y read) #\rEl método search nos permitirá obtener los ids de las entradas que queramos de un modelo específico. Por ejemplo, queremos obtener todos los contactos que sean empresas. El modelo de la aplicación de contactos dentro de Odoo es res.partner. Para filtrar entradas se usan los campos. Estos campos son básicamente las características que tiene cada entrada y dependen del modelo. Para mirar los campos que tiene cada modelo accederemos a la lista de modelos que se encuentra en la sección Técnico dentro de los ajustes. Dentro de res.partner podemos observar que existe un campo booleano llamado is_company que determina si el contacto se trata de una compañía o no. Para obtener los id de los contactos utilizamos esta línea:\nprint(models.execute_kw(db, uid, password,\r'res.partner', 'search', [[['is_company', '=',\rTrue]]]))\r El método execute_kw lo utilizaremos para ejecutar los diversos métodos que proporciona la api (en este caso search). A search se le pasan los siguientes parámetros:\n db, uid, password: la información que especificamos al principio del programa res.partner: el modelo de donde se sacará la información search: el método de la api que se va a ejecutar [[[‘is_company’, ‘=’, True]]]: la condición que tienen que cumplir las entradas que queremos obtener, es decir, el filtro. En este caso queremos obtener las entradas que tengan el campo is_company a True.  Esto nos devolverá un array con los ids de las entradas que cumplan el filtro. Para obtener los proyectos que estén activos, utilizaríamos lo siguiente:\n\rprint(models.execute_kw(db, uid, password,\r'project.project', 'search', [[['active', '=',\rTrue]]]))\r Como podemos ver, se ha cambiado el filtro y el modelo que usamos, que en este caso es project.project. Para mostrar más información de las entradas tendremos que usar el método read. Al método read le pasaremos los ids obtenidos con el método search.\n\rids = models.execute_kw(db, uid, password, 'project.project', 'search', [[['active', '=', True]]])\rrecord = models.execute_kw(db, uid, password,\r'project.project', 'read', [ids], {'fields': ['name']})\rprint(record)\r Como se puede ver, se están guardando los ids obtenidos en la ejecución del método search y se le están pasando al método read. A parte de esto, se le tendrán que pasar al read los campos que quieres que se muestren. En este caso queremos que se muestre el nombre del proyecto, por lo que lo añadimos dentro del array. Como curiosidad, a parte del nombre también se mostrará el id siempre independientemente de que no lo especifiquemos dentro de la sentencia fields. La forma más óptima de hacer esto es el método search_read, el cual ejecutará automáticamente los métodos search y read.\nmodels.execute_kw(db, uid, password, 'project.project',\r'search_read', [[['active', '=', True]]], {'fields':\r['name']})\r Su ejecución es muy similar a ejecutarlos de forma separada. También podemos obtener todos los campos de un modelo de la siguiente manera:\nmodels.execute_kw(db, uid, password, 'res.partner', 'fields_get', [],\r{'attributes': ['string', 'help', 'type']})\r Esto nos devolverá varias entradas que seguirán el siguiente formato:\n\u0026quot;ean13\u0026quot;: {\r\u0026quot;type\u0026quot;: \u0026quot;char\u0026quot;,\r\u0026quot;help\u0026quot;: \u0026quot;BarCode\u0026quot;,\r\u0026quot;string\u0026quot;: \u0026quot;EAN13\u0026quot;\r},\r Siendo type el tipo de campos y help una pequeña ayuda para entender para que se usa el campo.\nCrear entradas (método create) #\rEste método es muy similar a los anteriores:\n\rid = models.execute_kw(db, uid, password,\r'project.project', 'create', [{'name': \u0026quot;Nuevo\rProyecto\u0026quot;}])\r La única diferencia es que hay que especificarle los valores de los campos que tendrá la nueva entrada. En este caso solo especificamos el nombre pero si quisiésemos que tuviese más campos la entradas solo habría que añadirlos.\nLa ejecución de este método devuelve el id de la nueva entrada creada.\nBorrar entradas (método unlink) #\rA este método hay que pasarle el id de la entrada que queramos eliminar, en este caso podemos eliminar la que creamos en el apartado anterior:\n\rmodels.execute_kw(db, uid, password, 'project.project',\r'unlink', [[id]])\r Si quisiésemos eliminar todas las entradas resultantes de una búsqueda, hacemos lo siguiente:\n\rid = models.execute_kw(db, uid, password,\r'project.project', 'search', [[['name', '=', \u0026quot;Nuevo\rProyecto\u0026quot;]]])\rmodels.execute_kw(db, uid, password, 'project.project',\r'unlink', [id])\r Si comparamos los dos ejemplos, hay una diferencia significativa en el método unlink, la forma en la que se pasan las entradas a eliminar. En el primer ejemplo, se le pasan como [[id]] ya que habíamos obtenido el valor id del método create. Este método devuelve un valor numérico que representa el id de la entrada. Sin embargo, en el siguiente ejemplo el valor de la variable id se obtiene del método search, que devuelve un array con los resultados de la búsqueda, independientemente de si esta solo ha encontrado una entrada. Esto explica la diferencia en la ejecución de los métodos, ya que a unlink hay que pasarle un array de arrays de entradas.\nModificar entradas (método write) #\rEste método es muy similar a unlink:\n\rmodels.execute_kw(db, uid, password, 'project.project',\r'write', [[id], {'name': \u0026quot;Newer partner\u0026quot;}])\r Al write hay que pasarle el id de la entrada y la información que se quiere modificar. Esta información consistirá en el nombre del campo y un valor.\n"}),e.add({id:13,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()